- [CASSANDRA]charger un fichier en local sur la VM (sur 5 noeuds)

> allumer la VM et regarder l'IP
> mettre le network en host-only et l'appeler 'vboxnet0' si ce n'est pas déjà fait
> s'y connecter en SSH: 
ssh bigdata@192.168.56.101 (bigdatafuret)
> verifier que le cluster est là:
ccm status
> lancer le cluster
ccm start test
> copier notre fichier vers la VM (à faire dans un nouveau terminal, en dehors de la VM): 
scp -rp /home/roms/Desktop/Projet_noSQL/Earthquake-Notification-System/data_10.csv bigdata@192.168.56.101:/home/bigdata/ccm

scp -rp /home/roms/Desktop/Projet_noSQL/Earthquake-Notification-System/data_10_ordered.csv bigdata@192.168.56.101:/home/bigdata/ccm
> se connecter en csql sur un noeud:
ccm node1 cqlsh
> créer un keyspace
CREATE KEYSPACE ks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3 };
> créer la table qui va recevoir les enregistrements:
CREATE TABLE ks.table1 (
	date text, 
	code_cellule text, 
	latitude decimal, 
	longitude decimal, 
	telephone int,
	PRIMARY KEY (telephone, date));

CREATE TABLE ks.table2 (
	latitude decimal, 
	longitude decimal, 
	telephone int PRIMARY KEY);

CREATE TABLE ks.table3 (
	latitude decimal, 
	longitude decimal, 
	telephone int,
	PRIMARY KEY((telephone), latitude, longitude));

CREATE TABLE ks.table4 (
	latitude decimal, 
	longitude decimal, 
	telephone int,
	PRIMARY KEY((telephone), latitude, longitude));


	PRIMARY KEY((latitude, longitude), telephone));

> copier les données du csv vers table1
> dans table1, on a tout ordonné par telephone et date
COPY ks.table1 (date, code_cellule, latitude, longitude, telephone)
FROM '/home/bigdata/ccm/data_10.csv'
WITH DELIMITER = ';';

> copier table1 dans un csv (elle est alors triée par telephone et par date)
COPY ks.table1 (telephone, latitude, longitude) TO 'tempA.csv';

> copier le .csv trié vers table2, qui contient alors le telephone et la dernière latitude et longitude
COPY ks.table2 (telephone, latitude, longitude) FROM 'tempA.csv';

> copier table2 vers un autre .csv
COPY ks.table2 (telephone, latitude, longitude) TO 'tempB.csv';

> copie ce .csv vers table3 ou latitude et longitude sont clés et pourront donc être requêtées
COPY ks.table3 (telephone, latitude, longitude) FROM 'tempB.csv';

> requête pour le tsunami:
SELECT telephone, latitude, longitude
FROM ks.table3
WHERE 0 < latitude AND latitude < 35 AND 0 < longitude AND longitude < 200 allow filtering;

SELECT telephone, latitude, longitude FROM ks.table3 WHERE latitude > 12 allow filtering;

COPY ks.table4 (telephone, latitude, longitude) FROM 'tempA.csv';

> copier table1 dans un csv (elle est alors triée par telephone et par date)
COPY ks.table1 (telephone, date) TO 'tempA.csv';

> une fois triée, on peut l'importer dans table2, qui aura les enregistrements les plus récents
COPY ks.table2 (telephone, latitude, longitude) FROM 'tempA.csv';

idée: repasser en rechargeant les données en espérant terminer avec la donnée la + récente
COPY ks.table2 (telephone, date) TO 'temp.csv';
COPY ks.table2 (telephone, date) TO 'temp.csv';

> pour insérer le résultat d'une sous requete, il faut passer par un .csv
COPY ks.table3 (telephone, latitude, longitude) TO 'temp.csv';
COPY ks.table2 (telephone, latitude, longitude) FROM 'temp.csv';
> estimation de la taille du .csv si 1 million de lignes: ???Mo

> dans table2, on a seulement le numéro de téléphone
COPY ks.table2 (date, code_cellule, latitude, longitude, telephone)
FROM '/home/bigdata/ccm/data_10.csv'
WITH DELIMITER = ';';


COPY ks.table1 (telephone, date)
FROM '/home/bigdata/ccm/data_10.csv'
WITH DELIMITER = ';';

COPY ks.table2 (date, code_cellule, latitude, longitude, telephone)
FROM '/home/bigdata/ccm/data_10.csv'
WITH DELIMITER = ';';

COPY ks.table2 (date, code_cellule, latitude, longitude, telephone)
FROM '/home/bigdata/ccm/data_10_ordered.csv'
WITH DELIMITER = ';';

COPY ks.table1 (telephone, latitude, longitude) TO 'temp.csv';
COPY ks.table2 (telephone, latitude, longitude) FROM 'temp.csv';



DROP TABLE ks.table1;

CREATE TABLE ks.table2 (
	telephone int PRIMARY KEY,
	latitude decimal,
	longitude decimal);

CREATE TABLE ks.table3 (
	telephone int PRIMARY KEY,
	latitude decimal,
	longitude decimal);

INSERT INTO ks.table2 (telephone, latitude, longitude) VALUES (123456, 66.666, 66.666);
INSERT INTO ks.table3 (telephone, latitude, longitude) VALUES (654321, 99.999, 99.999);



CREATE TABLE ks.table4 (
	telephone int PRIMARY KEY,
	date timestamp);

INSERT INTO ks.table4 (telephone, date) VALUES (123456, '2014-12-31');
INSERT INTO ks.table4 (telephone, date) VALUES (123456, '2010-12-31');

utiliser blob comme data type?
SELECT id, blobAsBigint(timestampAsBlob(val)) AS val FROM test.test
