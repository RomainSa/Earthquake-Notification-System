----------------------------------------------------------------------------------------------
GUIDE - CASSANDRA
----------------------------------------------------------------------------------------------

> allumer la VM et regarder l'IP

> mettre le network en host-only et l'appeler 'vboxnet0' si ce n'est pas déjà fait

> lancer un forwarding de port dans une fenêtre:
ssh -nNT -L 9042:127.0.0.1:9042 bigdata@192.168.56.101

> se connecter en SSH dans une nouvelle fenêtre: 
ssh bigdata@192.168.56.101 (bigdatafuret)

> verifier que le cluster est là:
ccm status

> lancer le cluster:
ccm start test

> copier notre fichier vers la VM (dans une nouvelle fenêtre): 
scp -rp /home/roms/Desktop/Projet_noSQL/Earthquake-Notification-System/data_10.csv bigdata@192.168.56.101:/home/bigdata/ccm

scp -rp '/home/roms/Desktop/[10-02] Projet_noSQL/bigdata-project-2014/data/data_1GB.csv' bigdata@192.168.56.101:/home/bigdata/ccm

scp -rp '/home/roms/Desktop/[10-02] Projet_noSQL/bigdata-project-2014/data/data_50MB.csv' bigdata@192.168.56.101:/home/bigdata/ccm


> se connecter en csql sur un noeud:
ccm node1 cqlsh
> créer un keyspace
CREATE KEYSPACE tns WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

> passer sous Python













> créer la table qui va recevoir les enregistrements:
CREATE TABLE tns.base (
	date text, 
	code_cellule text, 
	latitude decimal, 
	longitude decimal, 
	telephone int,
	PRIMARY KEY (telephone, date));

CREATE TABLE tns.filtre (
	latitude decimal, 
	longitude decimal, 
	date text,
	telephone int PRIMARY KEY);

CREATE INDEX latitudeIndex ON tns.base (latitude);
CREATE INDEX longitudeIndex ON tns.base (longitude);

CREATE TABLE tns.result (
	latitude decimal, 
	longitude decimal, 
	date text,
	telephone int,
	PRIMARY KEY(telephone));

> copier les données du csv vers table1
> dans table1, on a tout ordonné par telephone et date
COPY tns.base (date, code_cellule, latitude, longitude, telephone)
FROM '/home/bigdata/ccm/data_10.csv'
WITH DELIMITER = ';';

> filtrer les données
DELETE FROM tns.base WHERE date >= '2015-01-01 00:00:00,000';

> copier table1 dans un csv (elle est alors triée par telephone et par date)
COPY ks.filtre (telephone, latitude, longitude) TO 'tempA.csv';

> copier le .csv trié vers table2, qui contient alors le telephone et la dernière latitude et longitude
COPY ks.table2 (telephone, latitude, longitude) FROM 'tempA.csv';

> à partir d'ici, il y a deux façon de procéder:
> 1: créer deux index sur longitude et latitude et utiliser ALLOW FILTERING (mais si les données sont MAJ dynamiquement??)
> 2: créer une geoHash et filter dessus avec token()

> méthode 1
CREATE INDEX latitudeIndex ON ks.table2 (latitude);
CREATE INDEX longitudeIndex ON ks.table2 (longitude);
SELECT * FROM ks.table2 WHERE latitude > 35 AND latitude < 235;

CREATE INDEX latitudeIndex3 ON ks.table3 (latitude);
CREATE INDEX longitudeIndex3 ON ks.table3 (longitude);
SELECT * FROM ks.table2 WHERE latitude > 35;

> copier table2 vers un autre .csv
COPY ks.table2 (telephone, latitude, longitude) TO 'tempB.csv';

> copie ce .csv vers table3 ou latitude et longitude sont clés et pourront donc être requêtées
COPY ks.table3 (telephone, latitude, longitude) FROM 'tempB.csv';

> requête pour le tsunami:
SELECT telephone, latitude, longitude
FROM ks.table3
WHERE 
	latitude > 1 AND
	latitude < 35
allow filtering;

comment mettre:
longitude > 12 AND
longitude < 500

???





--------------------------------------------------------------------------------------
AUTRE
--------------------------------------------------------------------------------------

> récupérer le fichier de configuration yaml:
scp bigdata@192.168.56.101:/home/bigdata/.ccm/test/node1/conf/cassandra.yaml /home/roms/Desktop/Projet_noSQL/Earthquake-Notification-System/
> envoyer un fichier yaml:
scp -rp /home/roms/Desktop/Projet_noSQL/Earthquake-Notification-System/cassandra.yaml bigdata@192.168.56.101:/home/bigdata/.ccm/test/node1/conf
> verifie les changements
head -n 70 /home/bigdata/.ccm/test/node1/conf/cassandra.yaml


